{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "moduleResolution": "node",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
	"sourceMap": true,
    "strict": true,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
	"strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
	"strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
	"strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */,
	"strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
	"noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
	"useUnknownInCatchVariables": true /* Default catch clause variables as 'unknown' instead of 'any'. */,
	"alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
	"exactOptionalPropertyTypes": false /* Interpret optional property types as written, rather than adding 'undefined'. */,
	"noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
	"noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
	"noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index. */,
	"noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
	"noPropertyAccessFromIndexSignature": true /* Enforces using indexed accessors for keys declared using an indexed type. */,
	/* Completeness */
	//"skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
	//"skipLibCheck": true /* Skip type checking all .d.ts files. */,
    "lib": [
      "esnext"
    ],
    "types": [
      "@cloudflare/workers-types"
    ]
  }
}